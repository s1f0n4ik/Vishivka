// frontend/src/components/SchemeList.jsx

import React, { useState, useEffect, useCallback } from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import apiClient from '../api/apiClient';

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏ ---
function FilterPanel({ onFilterChange, categories }) {
    const [searchParams] = useSearchParams();
    const [searchTerm, setSearchTerm] = useState(searchParams.get('search') || '');
    const [category, setCategory] = useState(searchParams.get('category') || '');
    const [difficulty, setDifficulty] = useState(searchParams.get('difficulty') || '');

    const handleFilter = (e) => {
        e.preventDefault();
        onFilterChange({ search: searchTerm, category: category, difficulty: difficulty });
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ App.css –∫ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    return (
        <form onSubmit={handleFilter} className="filter-panel">
            <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
                value={searchTerm}
                onChange={e => setSearchTerm(e.target.value)}
            />
            <select value={category} onChange={e => setCategory(e.target.value)}>
                <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                {categories.map(cat => <option key={cat.id} value={cat.id}>{cat.name}</option>)}
            </select>
            <select value={difficulty} onChange={e => setDifficulty(e.target.value)}>
                <option value="">–õ—é–±–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å</option>
                <option value="easy">–õ—ë–≥–∫–∞—è</option>
                <option value="medium">–°—Ä–µ–¥–Ω—è—è</option>
                <option value="hard">–°–ª–æ–∂–Ω–∞—è</option>
            </select>
            <button type="submit">–ù–∞–π—Ç–∏</button>
        </form>
    );
}

function SchemeList({ schemes: propSchemes, isMySchemesPage = false }) {
    // ... –≤–µ—Å—å –≤–∞—à –∫–æ–¥ —Å —Ö—É–∫–∞–º–∏ (useState, useEffect –∏ —Ç.–¥.) –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ...
    const [schemes, setSchemes] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [nextPageUrl, setNextPageUrl] = useState(null);
    const [prevPageUrl, setPrevPageUrl] = useState(null);
    const [categories, setCategories] = useState([]);
    const [searchParams, setSearchParams] = useSearchParams();

    const fetchSchemes = useCallback(async (url) => {
        setLoading(true);
        setError(null);
        try {
            const response = await apiClient.get(url);
            setSchemes(response.data.results);
            setNextPageUrl(response.data.next);
            setPrevPageUrl(response.data.previous);
        } catch (err) {
            setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—ã.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        if (!isMySchemesPage) {
            apiClient.get('/categories/')
                .then(res => setCategories(res.data))
                .catch(err => console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞", err));
        }
    }, [isMySchemesPage]);

    useEffect(() => {
        if (propSchemes) {
            setSchemes(propSchemes);
            setLoading(false);
            setNextPageUrl(null);
            setPrevPageUrl(null);
        } else {
            const queryString = searchParams.toString();
            fetchSchemes(`/schemes/?${queryString}`);
        }
    }, [propSchemes, fetchSchemes, searchParams]);

    const handleFilterChange = (filters) => {
        const params = new URLSearchParams();
        if (filters.search) params.set('search', filters.search);
        if (filters.category) params.set('category', filters.category);
        if (filters.difficulty) params.set('difficulty', filters.difficulty);
        setSearchParams(params);
    };


    if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º...</p>;
    if (error) return <p style={{ color: 'red' }}>{error}</p>;

    // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –†–ê–ó–ú–ï–¢–ö–ï ---
    return (
        <div className="container">
            {!isMySchemesPage && <FilterPanel onFilterChange={handleFilterChange} categories={categories} />}

            {schemes.length > 0 ? (
                <>
                    <div className="scheme-list-grid">
                        {schemes.map(scheme => (
                            // –í—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–ø–µ—Ä—å –æ–¥–Ω–∞ –±–æ–ª—å—à–∞—è —Å—Å—ã–ª–∫–∞
                            <Link to={`/schemes/${scheme.id}`} key={scheme.id} className="scheme-card-link">
                                <div className="scheme-card">
                                    <img
                                        src={scheme.main_image || 'https://via.placeholder.com/300x200?text=No+Image'}
                                        alt={`–ü—Ä–µ–≤—å—é –¥–ª—è ${scheme.title}`}
                                        className="scheme-card-image"
                                    />
                                    <div className="scheme-card-info">
                                        <h3 className="scheme-card-title">{scheme.title}</h3>
                                        <p className="scheme-card-author">
                                            {scheme.author ? scheme.author.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
                                        </p>
                                        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ */}
                                        <div className="scheme-card-stats">
                                            <span>üëÅÔ∏è {scheme.views_count}</span>
                                            <span>
                                                {scheme.is_favorited ? '‚ù§Ô∏è' : 'ü§ç'}{' '}
                                                {scheme.favorites_count}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </Link>
                        ))}
                    </div>

                    {(nextPageUrl || prevPageUrl) && (
                         <div className="pagination-controls">
                            {prevPageUrl && (<button onClick={() => fetchSchemes(prevPageUrl)}>&larr; –ù–∞–∑–∞–¥</button>)}
                            {nextPageUrl && (<button onClick={() => fetchSchemes(nextPageUrl)}>–í–ø–µ—Ä–µ–¥ &rarr;</button>)}
                        </div>
                    )}
                </>
            ) : (
                 isMySchemesPage ?
                 <p>–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ö–µ–º—ã. <Link to="/add-scheme">–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é?</Link></p>
                 :
                 <p>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.</p>
            )}
        </div>
    );
    // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –†–ê–ó–ú–ï–¢–ö–ï ---
}

export default SchemeList;